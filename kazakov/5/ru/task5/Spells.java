package ru.task5;

import java.util.List;

//  –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: "–ò—Å—Ü–µ–ª–µ–Ω–∏–µ" - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è –º–∞–≥—É, –ø—Ä–æ–∏–∑–Ω–µ—Å—à–µ–º—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
class Heal extends Spell {
    Heal(Scene scene, Wizard owner) {
        super(" ‚ô•‚ô•‚ô•HEAL‚ô•‚ô•‚ô• ", scene, owner);
    }

    @Override
    void cast() {
        //  –ò—Å—Ü–µ–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è –º–∞–≥—É, –ø—Ä–æ–∏–∑–Ω–µ—Å—à–µ–º—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ:
        owner.health += Main.MONSTER_AVERAGE_DAMAGE;
        //  –æ—Ä–≥–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –º–∞–≥—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª "–ø–µ—Ä–µ–∫–∞—á–∞–Ω–Ω—ã–º":
        if (owner.health > Main.CHARACTERS_MAX_HEALTH)
            owner.health = Main.CHARACTERS_MAX_HEALTH;
    }
}

// –ú–æ–ª–Ω–∏—è - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ª—é–±–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É:
class Lightning extends Spell {
    Lightning(Scene scene, Wizard owner) {
        super("‚Üï‚Üï‚ÜïLIGHTNING‚Üï‚Üï‚Üï", scene, owner);
    }

    @Override
    void cast() {
        int enemyIndex = scene.getRandomEnemy(owner.position);
        Character enemy = scene.getCharacter (enemyIndex);
        assert (enemy != null);
        //  –Ω–∞–Ω–æ—Å–∏–º —É—â–µ—Ä–± –¥—Ä—É–≥–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É:
        enemy.health -= Main.MONSTER_AVERAGE_DAMAGE;
    }
}

// –¶–µ–ø–Ω–∞—è –º–æ–ª–Ω–∏—è - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω, –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –Ω–∞ —Å—Ü–µ–Ω–µ, –∫—Ä–æ–º–µ –º–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ:
class ChainLightning extends Spell {
    ChainLightning(Scene scene, Wizard owner) {
        super("‚Ü∞‚Ü∞‚Ü∞CHAINLIGHTNING‚Ü±‚Ü±‚Ü±", scene, owner);
    }

    @Override
    void cast() {
        List<Character> chars = scene.getCharactersList();
        Character enemy;
        //  –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –Ω–∞ —Å—Ü–µ–Ω–µ, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è:
        for (int i = 0; i < chars.size(); i++) {
            enemy = scene.getCharacter(i);
            //  –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è, —Ä–∞–∑–º–µ—Ä —É—Ä–æ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü.—á–∏—Å–ª—É –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ:
            if (enemy != null && !enemy.equals(owner))
                enemy.health -= Main.MONSTER_AVERAGE_DAMAGE / scene.getNumOfAlive();
        }
    }
}

// –°—Ç–µ–Ω–∞ –æ–≥–Ω—è - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –Ω–∞ —á–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö:
class WallOfFire extends Spell {
    WallOfFire(Scene scene, Wizard owner) {
        super("‚ïë‚ïë‚ïëWALLOFFIRE‚ïë‚ïë‚ïë", scene, owner);
    }

    @Override
    void cast() {
        List<Character> chars = scene.getEvenCharactersList();
        Character enemy;
        //  –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è:
        for (int i = 0; i < chars.size(); i++) {
            enemy = scene.getCharacter(i);
            //  –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è, —Ä–∞–∑–º–µ—Ä —É—Ä–æ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü.—á–∏—Å–ª—É –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ:
            if (enemy != null && !enemy.equals(owner))
                enemy.health -= Main.MONSTER_AVERAGE_DAMAGE / scene.getNumOfAlive();
        }
    }
}

//  –û–≥–Ω–µ–Ω–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂—É, —Å—Ç–æ—è—â–µ–º—É –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–π —Å –º–∞–≥–æ–º –ø–æ–∑–∏—Ü–∏–∏:
//  –ï—Å–ª–∏ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ—Ç - –Ω–∏–∫–æ–º—É —É—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è
class FireTouch extends Spell {
    FireTouch(Scene scene, Wizard owner) {
        super("‚ï¢‚ï¢‚ï¢FIRETOUCH‚ïü‚ïü‚ïü", scene, owner);
    }

    @Override
    void cast() {
        //  –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Å–æ—Å–µ–¥—è–º:
        for (Character enemy : scene.getNeighboursList(owner.position)) {
            enemy.health -= Main.MONSTER_AVERAGE_DAMAGE / 2;    //  —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Ä–æ–Ω –¥–ª—è —Å–æ—Å–µ–¥–µ–π –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2
        }
    }
}

//  –ò–∑–≥–Ω–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–æ–≤ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Å–µ–º –º–æ–Ω—Å—Ç—Ä–∞–º:
class ExpulsionMonters extends Spell {
    ExpulsionMonters(Scene scene, Wizard owner) {
        super("ùîêùîêùîêEXPULSEMONSTERSùîêùîêùîê", scene, owner);
    }

    @Override
    void cast() {
        List<Character> monsters = scene.getMonstersList();
        //  —É—Ä–æ–Ω –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –∫–æ–ª-–≤—É –º–æ–Ω—Å—Ç—Ä–æ–≤:
        monsters.forEach(x -> x.health -= Main.MONSTER_AVERAGE_DAMAGE / monsters.size());
    }
}

//  –ú–∏–≥—Ä–µ–Ω—å - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –≤—Å–µ–º –º–∞–≥–∞–º:
class HeadAche extends Spell {
    HeadAche(Scene scene, Wizard owner) {
        super("‚®Ä‚®Ä‚®ÄHEADACHE‚®Ä‚®Ä‚®Ä", scene, owner);
    }

    @Override
    void cast() {
        List<Character> wizards = scene.getWizardsList();
        //  —É—Ä–æ–Ω –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –∫–æ–ª-–≤—É –º–æ–Ω—Å—Ç—Ä–æ–≤:
        wizards.forEach(x -> { if (x.position != owner.position) x.health -= Main.MONSTER_AVERAGE_DAMAGE / (wizards.size() - 1); });
    }
}
